---
import type { CollectionEntry } from 'astro:content';
import Layout from './Layout.astro';

type Props = {
  post: CollectionEntry<'blog'>;
};

const { post } = Astro.props;
const { title, description, pubDate, updatedDate, heroImage } = post.data;

const formattedPubDate = pubDate.toLocaleDateString('en-us', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const formattedUpdatedDate = updatedDate?.toLocaleDateString('en-us', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
---

<Layout title={title} description={description}>
  <article class="max-w-medium mx-auto">
    <!-- Header -->
    <header class="mb-12 space-y-6">
      <h1 class="text-medium-large font-serif font-bold text-medium-text leading-tight">
        {title}
      </h1>
      <div class="flex items-center space-x-4 text-medium-small text-medium-text-secondary">
        <time>{formattedPubDate}</time>
        {updatedDate && (
          <span class="text-medium-text-secondary">
            â€¢ Updated on <time>{formattedUpdatedDate}</time>
          </span>
        )}
      </div>
      {heroImage && (
        <img
          src={heroImage}
          alt=""
          class="w-full h-auto rounded-lg transition-opacity duration-300"
          loading="lazy"
          decoding="async"
          onload="this.style.opacity='1'"
          style="opacity: 0; background-color: #f3f4f6;"
        />
      )}
    </header>

    <!-- Content -->
    <div class="prose prose-lg max-w-none">
      <slot />
    </div>
  </article>

  <style>
    /* Medium-inspired typography styles */
    .prose {
      @apply text-medium-text;
    }

    /* Force all headings to use Instrument Serif with maximum specificity */
    article .prose h1,
    article .prose h2,
    article .prose h3,
    article .prose h4,
    article .prose h5,
    article .prose h6,
    .prose h1,
    .prose h2,
    .prose h3,
    .prose h4,
    .prose h5,
    .prose h6,
    h1, h2, h3, h4, h5, h6 {
      font-family: 'Instrument Serif', Georgia, serif !important;
      font-weight: 700 !important;
      color: #242424 !important;
    }

    .prose h1 {
      @apply text-medium-h1 mb-6 mt-12 first:mt-0 !important;
      font-family: 'Instrument Serif', Georgia, serif !important;
    }

    .prose h2 {
      @apply text-medium-h2 mb-4 mt-10 !important;
      font-family: 'Instrument Serif', Georgia, serif !important;
    }

    .prose h3 {
      @apply text-xl mb-3 mt-8 !important;
      font-family: 'Instrument Serif', Georgia, serif !important;
    }

    .prose h4 {
      @apply text-lg mb-2 mt-6 !important;
      font-family: 'Instrument Serif', Georgia, serif !important;
    }

    .prose h5 {
      font-family: 'Instrument Serif', Georgia, serif !important;
    }

    .prose h6 {
      font-family: 'Instrument Serif', Georgia, serif !important;
    }

    .prose p {
      @apply text-medium-body mb-6 leading-relaxed;
    }

    .prose a {
      @apply text-medium-accent hover:underline font-medium;
    }

    .prose blockquote {
      @apply border-l-4 border-medium-border pl-6 italic text-medium-text-secondary my-8;
    }

    .prose code {
      @apply bg-medium-hover px-2 py-1 rounded text-sm;
    }

    .prose pre {
      @apply bg-medium-hover p-4 rounded-lg overflow-x-auto my-6;
    }

    .prose ul,
    .prose ol {
      @apply mb-6;
    }

    .prose li {
      @apply mb-2;
    }

    /* Images with better spacing */
    .prose img {
      @apply rounded-lg mb-2 transition-opacity duration-300;
      margin-top: 2rem;
      opacity: 0;
      background-color: #f3f4f6;
    }

    .prose img.loaded {
      opacity: 1;
      background-color: transparent;
    }

    /* Image captions - paragraphs that immediately follow images */
    .prose img + p {
      @apply text-medium-small text-medium-text-secondary italic mt-1 mb-6 leading-normal;
    }

    /* NUCLEAR OPTION - Maximum specificity override for ALL headings */
    html body article .prose h1,
    html body article .prose h2,
    html body article .prose h3,
    html body article .prose h4,
    html body article .prose h5,
    html body article .prose h6,
    html body .prose h1,
    html body .prose h2,
    html body .prose h3,
    html body .prose h4,
    html body .prose h5,
    html body .prose h6,
    html body h1,
    html body h2,
    html body h3,
    html body h4,
    html body h5,
    html body h6 {
      font-family: 'Instrument Serif', Georgia, serif !important;
      font-weight: 700 !important;
    }
  </style>

  <script>
    // Handle lazy loading for content images
    document.addEventListener('DOMContentLoaded', () => {
      const images = document.querySelectorAll('.prose img');

      // Add loading attribute and onload handler to content images
      images.forEach((element) => {
        const img = element as HTMLImageElement;
        img.setAttribute('loading', 'lazy');
        img.setAttribute('decoding', 'async');

        // Handle image load
        const handleLoad = () => {
          img.classList.add('loaded');
          img.removeEventListener('load', handleLoad);
        };

        if (img.complete) {
          img.classList.add('loaded');
        } else {
          img.addEventListener('load', handleLoad);
        }
      });
    });
  </script>
</Layout>
